package StrategyPattern;

import java.io.FileOutputStream;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;

import com.DB;
import com.itextpdf.text.Anchor;
import com.itextpdf.text.BadElementException;
import com.itextpdf.text.BaseColor;
import com.itextpdf.text.Chapter;
import com.itextpdf.text.Document;
import com.itextpdf.text.DocumentException;
import com.itextpdf.text.Element;
import com.itextpdf.text.Font;
import com.itextpdf.text.Paragraph;
import com.itextpdf.text.Phrase;
import com.itextpdf.text.Section;
import com.itextpdf.text.pdf.PdfPCell;
import com.itextpdf.text.pdf.PdfPTable;
import com.itextpdf.text.pdf.PdfWriter;

public class PDFCreator {
	private static String FILE = "/Users/fabio/Desktop/Reports.pdf";
  private static Font catFont = new Font(Font.FontFamily.TIMES_ROMAN, 18, Font.BOLD);
  private static Font redFont = new Font(Font.FontFamily.TIMES_ROMAN, 12, Font.NORMAL, BaseColor.RED);
  private static Font subFont = new Font(Font.FontFamily.TIMES_ROMAN, 16, Font.BOLD);
  private static Font smallBold = new Font(Font.FontFamily.TIMES_ROMAN, 12, Font.BOLD);

	public static void createPDF(StrategyStats x) {
		try {
	        Document document = new Document();
	        PdfWriter.getInstance(document, new FileOutputStream(FILE));
	        document.open();
	        addMetaData(document, x);
	        addTitlePage(document, x);
	        addContent(document, x);
	        document.close();
	    } catch (Exception e) {
	        e.printStackTrace();
	    }
	}

	// iText allows to add metadata to the PDF which can be viewed in your Adobe
	// Reader
	// under File -> Properties
	private static void addMetaData(Document document, StrategyStats x) {
	    document.addTitle(x.status + " Report");
	    document.addSubject(x.startDate + " - " + x.endDate);
	    document.addKeywords("Java, PDF, iText");
	    document.addAuthor(x.adminName);
	    document.addCreator(x.adminName);
	}

	private static void addTitlePage(Document document, StrategyStats x) throws DocumentException {
	    Paragraph preface = new Paragraph();

	    // We add one empty line
	    addEmptyLine(preface, 1);
	    // Lets write a big header
	    preface.add(new Paragraph(x.status + " Report", catFont));

	    addEmptyLine(preface, 1);
	    // Will create: Report generated by: _name
	    preface.add(new Paragraph("Report generated by: " + x.adminName, smallBold));
	    addEmptyLine(preface, 3);
	    preface.add(new Paragraph("This document is created by Clinica Becuba.", smallBold));

	    addEmptyLine(preface, 8);

	    document.add(preface);
	    // Start a new page
	    document.newPage();
	}

	private static void addContent(Document document,  StrategyStats x) throws DocumentException {
	    Anchor anchor = new Anchor("This document describes swabs since", catFont);

	    // Second parameter is the number of the chapter
	    Chapter catPart = new Chapter(new Paragraph(anchor), 1);
	    Paragraph subPara = new Paragraph(x.startDate + " - " + x.endDate, subFont);
	    Section subCatPart = catPart.addSection(subPara);

	    // add a list
	    Paragraph paragraph = new Paragraph();
	    addEmptyLine(paragraph, 5);
	    subCatPart.add(paragraph);

	    // add a table
	    createTable(subCatPart, x);

	    // now add all this to the document
	    document.add(catPart);
	}

	private static void createTable(Section subCatPart,  StrategyStats x) throws BadElementException {
	    PdfPTable table = new PdfPTable(3);

	    PdfPCell c1 = new PdfPCell(new Phrase("Firstname"));
	    c1.setHorizontalAlignment(Element.ALIGN_CENTER);
	    table.addCell(c1);

	    c1 = new PdfPCell(new Phrase("Lastname"));
	    c1.setHorizontalAlignment(Element.ALIGN_CENTER);
	    table.addCell(c1);

	    c1 = new PdfPCell(new Phrase("Result"));
	    c1.setHorizontalAlignment(Element.ALIGN_CENTER);
	    table.addCell(c1);
	    table.setHeaderRows(1);

	    ResultSet rs = SwabsQuery(x);

	    try {
	    	while(rs.next()) {
	        	table.addCell(rs.getString("Nome"));
	        	table.addCell(rs.getString("Cognome"));
	        	table.addCell(rs.getString("Esito"));
	        }
	    }catch(Exception e) {
			e.printStackTrace();
		}

	    subCatPart.add(table);

	}

	private static void addEmptyLine(Paragraph paragraph, int number) {
	    for (int i = 0; i < number; i++) {
	        paragraph.add(new Paragraph(" "));
	    }
	}

	private static ResultSet SwabsQuery( StrategyStats x) {
		Connection con = DB.getConnection();
		ResultSet rs = null;
		try {
			PreparedStatement p = con.prepareStatement("SELECT * FROM PRENOTAZIONE PRE JOIN PERSONA PER ON PRE.CF = PER.CF WHERE DATA > ? AND DATA <= ? AND ESITO = \"pos\" OR ESITO = \"neg\";");
			p.setDate(1, x.startDate);
			p.setDate(2, x.endDate);
			rs = p.executeQuery();
		} catch(Exception e) {
			e.printStackTrace();
		}
		return rs;
	}
}
